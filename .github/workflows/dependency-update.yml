name: 📦 Dependency Update

on:
  schedule:
    # 每周一早上8点检查依赖更新
    - cron: '0 8 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Update type'
        required: false
        default: 'minor'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'

jobs:
  check-updates:
    name: 🔍 Check for Updates
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools pip-audit

      - name: 🔍 Check for outdated packages
        id: check-outdated
        run: |
          echo "::group::Current dependencies"
          pip list --format=freeze
          echo "::endgroup::"
          
          echo "::group::Checking for updates"
          pip list --outdated --format=json > outdated.json
          OUTDATED_COUNT=$(jq length outdated.json)
          echo "outdated_count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          
          if [ $OUTDATED_COUNT -gt 0 ]; then
            echo "📦 Found $OUTDATED_COUNT outdated packages:"
            jq -r '.[] | "\(.name): \(.version) -> \(.latest_version)"' outdated.json
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "✅ All packages are up to date"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      - name: 🔒 Security audit
        run: |
          echo "::group::Security audit"
          pip-audit --format=json --output=audit.json || true
          if [ -f audit.json ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' audit.json)
            echo "Found $VULN_COUNT vulnerabilities"
            if [ $VULN_COUNT -gt 0 ]; then
              echo "🚨 Security vulnerabilities found:"
              jq -r '.vulnerabilities[] | "- \(.package): \(.id) (\(.fix_versions // "No fix available"))"' audit.json
            fi
          fi
          echo "::endgroup::"

      - name: 📝 Generate update report
        if: steps.check-outdated.outputs.has_updates == 'true'
        run: |
          echo "# 📦 Dependency Update Report" > update_report.md
          echo "" >> update_report.md
          echo "## 🔄 Outdated Packages" >> update_report.md
          echo "" >> update_report.md
          echo "| Package | Current | Latest | Type |" >> update_report.md
          echo "|---------|---------|--------|------|" >> update_report.md
          
          jq -r '.[] | "| \(.name) | \(.version) | \(.latest_version) | TBD |"' outdated.json >> update_report.md
          
          echo "" >> update_report.md
          echo "## 🔒 Security Status" >> update_report.md
          if [ -f audit.json ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' audit.json)
            if [ $VULN_COUNT -gt 0 ]; then
              echo "⚠️ **$VULN_COUNT security vulnerabilities found**" >> update_report.md
              echo "" >> update_report.md
              jq -r '.vulnerabilities[] | "- **\(.package)**: \(.id) - \(.summary // "No description")"' audit.json >> update_report.md
            else
              echo "✅ No security vulnerabilities found" >> update_report.md
            fi
          fi
          
          echo "" >> update_report.md
          echo "## 🚀 Recommended Actions" >> update_report.md
          echo "1. Review the outdated packages above" >> update_report.md
          echo "2. Test the updates in a development environment" >> update_report.md
          echo "3. Update requirements.txt with new versions" >> update_report.md
          echo "4. Run tests to ensure compatibility" >> update_report.md

      - name: 🔄 Create update branch
        if: steps.check-outdated.outputs.has_updates == 'true'
        run: |
          BRANCH_NAME="dependency-update-$(date +%Y%m%d)"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b $BRANCH_NAME
          
          # 备份原始requirements.txt
          cp requirements.txt requirements.txt.backup
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: 📋 Update requirements (patch/minor only)
        if: steps.check-outdated.outputs.has_updates == 'true' && github.event.inputs.update_type != 'major'
        run: |
          echo "::group::Updating requirements"
          
          # 创建临时的更新脚本
          cat > update_requirements.py << 'EOF'
          import json
          import re
          import sys
          
          def update_requirements():
              # 读取过时的包信息
              with open('outdated.json', 'r') as f:
                  outdated = json.load(f)
              
              # 读取当前requirements.txt
              with open('requirements.txt', 'r') as f:
                  lines = f.readlines()
              
              updated_lines = []
              updates_made = []
              
              for line in lines:
                  line = line.strip()
                  if line.startswith('#') or not line:
                      updated_lines.append(line + '\n')
                      continue
                  
                  # 解析包名和版本
                  match = re.match(r'^([a-zA-Z0-9_-]+)([><=!~]+)(.+)$', line)
                  if match:
                      package_name = match.group(1).lower()
                      operator = match.group(2)
                      current_version = match.group(3)
                      
                      # 查找是否有更新
                      for pkg in outdated:
                          if pkg['name'].lower() == package_name:
                              # 只更新patch和minor版本
                              current_parts = current_version.split('.')
                              latest_parts = pkg['latest_version'].split('.')
                              
                              if len(current_parts) >= 2 and len(latest_parts) >= 2:
                                  # 检查是否是major版本更新
                                  if current_parts[0] != latest_parts[0]:
                                      print(f"Skipping major update for {package_name}: {current_version} -> {pkg['latest_version']}")
                                      break
                              
                              new_line = f"{pkg['name']}{operator}{pkg['latest_version']}"
                              updated_lines.append(new_line + '\n')
                              updates_made.append(f"{pkg['name']}: {current_version} -> {pkg['latest_version']}")
                              break
                      else:
                          updated_lines.append(line + '\n')
                  else:
                      updated_lines.append(line + '\n')
              
              # 写入更新后的requirements.txt
              with open('requirements.txt', 'w') as f:
                  f.writelines(updated_lines)
              
              return updates_made
          
          if __name__ == '__main__':
              updates = update_requirements()
              if updates:
                  print("Updates made:")
                  for update in updates:
                      print(f"  - {update}")
              else:
                  print("No updates applied")
          EOF
          
          python update_requirements.py
          echo "::endgroup::"

      - name: 🧪 Test updated dependencies
        if: steps.check-outdated.outputs.has_updates == 'true'
        run: |
          echo "::group::Testing updated dependencies"
          pip install -r requirements.txt
          python -c "import sys; print('Python version:', sys.version)"
          python -c "
          try:
              import fastapi, uvicorn, pydantic, loguru
              print('✅ Core dependencies imported successfully')
          except ImportError as e:
              print(f'❌ Import error: {e}')
              sys.exit(1)
          "
          echo "::endgroup::"

      - name: 📤 Create Pull Request
        if: steps.check-outdated.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.branch_name }}
          title: "📦 Update dependencies - $(date +%Y-%m-%d)"
          body-path: update_report.md
          commit-message: |
            📦 Update Python dependencies
            
            - Updated ${{ steps.check-outdated.outputs.outdated_count }} packages
            - Automated dependency update
            - Security audit completed
          labels: |
            dependencies
            automated
          reviewers: ${{ github.repository_owner }}
          draft: false
