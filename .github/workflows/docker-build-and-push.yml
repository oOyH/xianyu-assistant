name: 🐳 Docker Build and Push

on:
  push:
    branches:
      - main
      - master
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to Docker Hub'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/xianyu-auto-reply

jobs:
  # 代码质量检查
  code-quality:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort safety bandit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🎨 Check code formatting with Black
        run: black --check --diff .
        continue-on-error: true

      - name: 📏 Check import sorting with isort
        run: isort --check-only --diff .
        continue-on-error: true

      - name: 🔍 Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: 🛡️ Security check with bandit
        run: bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: 🔒 Check dependencies for security vulnerabilities
        run: safety check --json --output safety-report.json
        continue-on-error: true

  # Docker构建和推送
  docker-build-push:
    name: 🐳 Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: code-quality
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/develop' }}
          labels: |
            org.opencontainers.image.title=闲鱼自动回复系统
            org.opencontainers.image.description=企业级多用户闲鱼自动回复和管理系统
            org.opencontainers.image.vendor=zhinianboke
            org.opencontainers.image.licenses=仅供学习使用

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: 🔑 Log in to Docker Hub
        if: github.event_name != 'pull_request' && (github.event.inputs.push_to_registry != 'false')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && github.event.inputs.push_to_registry != 'false' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: 🔍 Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # 发布通知
  notify:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: startsWith(github.ref, 'refs/tags/v') && success()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🎉 Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 闲鱼自动回复系统 ${{ github.ref_name }}
            
            ### 📦 Docker镜像
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ### 🏗️ 支持架构
            - AMD64 (x86_64)
            - ARM64 (aarch64)
            
            ### 📋 更新内容
            请查看提交历史了解详细更新内容。
            
            ### 🔧 快速部署
            ```bash
            # 下载配置文件
            wget https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml
            
            # 启动服务
            docker-compose up -d
            ```
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
