name: 🐳 Docker Build and Push

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to Docker Hub'
        required: false
        default: 'true'
        type: boolean
      skip_quality_check:
        description: 'Skip code quality check'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/xianyu

jobs:
  # 代码质量检查
  code-quality:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_quality_check != 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort safety bandit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 📊 Generate quality report
        id: quality-report
        run: |
          echo "## 📊 Code Quality Report" > quality-summary.md
          echo "Generated at: $(date)" >> quality-summary.md
          echo "" >> quality-summary.md

      - name: 🎨 Check code formatting with Black
        run: |
          echo "### 🎨 Code Formatting" >> quality-summary.md
          if black --check --diff .; then
            echo "✅ Code formatting is correct" >> quality-summary.md
          else
            echo "❌ Code formatting issues found" >> quality-summary.md
          fi
          echo "" >> quality-summary.md
        continue-on-error: true

      - name: 📏 Check import sorting with isort
        run: |
          echo "### 📏 Import Sorting" >> quality-summary.md
          if isort --check-only --diff .; then
            echo "✅ Import sorting is correct" >> quality-summary.md
          else
            echo "❌ Import sorting issues found" >> quality-summary.md
          fi
          echo "" >> quality-summary.md
        continue-on-error: true

      - name: 🔍 Lint with flake8
        run: |
          echo "### 🔍 Code Linting" >> quality-summary.md
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          FLAKE8_RESULT=$(flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics)
          if [ -z "$FLAKE8_RESULT" ]; then
            echo "✅ No linting issues found" >> quality-summary.md
          else
            echo "⚠️ Linting issues found" >> quality-summary.md
          fi
          echo "" >> quality-summary.md
        continue-on-error: true

      - name: 🛡️ Security check with bandit
        run: |
          echo "### 🛡️ Security Analysis" >> quality-summary.md
          if bandit -r . -f json -o bandit-report.json; then
            echo "✅ No security issues found" >> quality-summary.md
          else
            ISSUES=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
            echo "⚠️ $ISSUES security issues found" >> quality-summary.md
          fi
          echo "" >> quality-summary.md
        continue-on-error: true

      - name: 🔒 Check dependencies for security vulnerabilities
        run: |
          echo "### 🔒 Dependency Security" >> quality-summary.md
          if safety check --json --output safety-report.json; then
            echo "✅ No vulnerable dependencies found" >> quality-summary.md
          else
            VULNS=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
            echo "⚠️ $VULNS vulnerable dependencies found" >> quality-summary.md
          fi
          echo "" >> quality-summary.md
        continue-on-error: true

      - name: 📤 Upload quality artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            quality-summary.md
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Docker构建和推送
  docker-build-push:
    name: 🐳 Build and Push Docker Image
    runs-on: ubuntu-latest
    # 只在推送事件或手动触发时运行
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=闲鱼自动回复系统
            org.opencontainers.image.description=企业级多用户闲鱼自动回复和管理系统
            org.opencontainers.image.vendor=zhinianboke
            org.opencontainers.image.licenses=仅供学习使用

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: 🔍 Debug build info
        id: version-info
        run: |
          echo "Build metadata:"
          echo "- Version: ${{ steps.meta.outputs.version }}"
          echo "- Tags: ${{ steps.meta.outputs.tags }}"
          echo "- GitHub ref: ${{ github.ref }}"
          echo "- GitHub ref name: ${{ github.ref_name }}"

          # 确定最终使用的版本号（仅标签触发）
          FINAL_VERSION="${{ github.ref_name }}"

          echo "Final version to use: $FINAL_VERSION"
          echo "final_version=$FINAL_VERSION" >> $GITHUB_OUTPUT

      - name: 🔑 Log in to Docker Hub
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.push_to_registry != 'false')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.push_to_registry != 'false') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.version-info.outputs.final_version }}
          provenance: false
          sbom: false

      - name: 📊 Build summary
        if: always()
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Push**: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.push_to_registry != 'false') }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.build.outcome }}" = "success" ]; then
            echo "- **Status**: ✅ Build successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ❌ Build failed" >> $GITHUB_STEP_SUMMARY
          fi

      # Trivy 安全扫描（可选，如果失败不影响构建）
      - name: 🔍 Run Trivy vulnerability scanner
        id: trivy-scan
        if: false  # 暂时禁用，避免构建失败
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version-info.outputs.final_version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        if: steps.trivy-scan.outcome == 'success' && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # 发布通知
  notify:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [docker-build-push, code-quality]
    if: startsWith(github.ref, 'refs/tags/v') && success()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Generate changelog and build info
        id: changelog
        run: |
          # 生成构建时间
          BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT

          # 获取上一个标签
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            echo "## 📋 更新内容" > changelog.md
            echo "" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> changelog.md
          else
            echo "## 📋 更新内容" > changelog.md
            echo "首次发布" >> changelog.md
          fi

          # 生成发布说明
          cat > release-body.md << EOF
          ## 🚀 闲鱼自动回复系统 ${{ github.ref_name }}

          ### 📦 Docker镜像
          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          \`\`\`

          ### 🏗️ 支持架构
          - ✅ AMD64 (x86_64)
          - ✅ ARM64 (aarch64)

          ###  快速部署
          \`\`\`bash
          # 使用 Docker Compose
          curl -O https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml
          docker-compose up -d

          # 或直接运行
          docker run -d --name xianyu-auto-reply \\
            -p 8000:8000 \\
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          \`\`\`

          ### 📊 构建信息
          - **构建时间**: $BUILD_TIME
          - **运行ID**: ${{ github.run_id }}
          - **提交**: ${{ github.sha }}
          - **标签**: ${{ github.ref_name }}

          EOF

          # 添加更新日志
          cat changelog.md >> release-body.md

      - name: 🎉 Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: 🚀 闲鱼自动回复系统 ${{ github.ref_name }}
          body_path: release-body.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
